/** * DepotDownloader Integration Step Component for Schedule I Developer Environment Utility * * Allows users to configure DepotDownloader for automated branch downloading and updating. * Provides options to install DepotDownloader, configure the installation path, or continue * with the existing copy-based approach. * * Key features: * - DepotDownloader installation guidance and GitHub link * - Path selection for DepotDownloader installation * - Validation of DepotDownloader installation * - Option to skip DepotDownloader and use copy method * - Clear explanation of benefits and requirements * - Simplified installation via winget or manual download * * @author Schedule I Developer Environment Utility Team * @version 2.0.3 */import React, { useState, useEffect } from 'react';interface DepotDownloaderIntegrationStepProps {  onDepotDownloaderPathSelected: (depotDownloaderPath: string | null) => void;  onUseDepotDownloader: (useDepotDownloader: boolean) => void;  selectedDepotDownloaderPath?: string | null;  useDepotDownloader?: boolean;}const DepotDownloaderIntegrationStep: React.FC<DepotDownloaderIntegrationStepProps> = ({  onDepotDownloaderPathSelected,  onUseDepotDownloader,  selectedDepotDownloaderPath = null,  useDepotDownloader = false}) => {  const [depotDownloaderPath, setDepotDownloaderPath] = useState(selectedDepotDownloaderPath || '');  const [isValidating, setIsValidating] = useState(false);  const [validationError, setValidationError] = useState<string | null>(null);  const [validationSuccess, setValidationSuccess] = useState(false);  useEffect(() => {    onDepotDownloaderPathSelected(depotDownloaderPath);    onUseDepotDownloader(useDepotDownloader);  }, [depotDownloaderPath, useDepotDownloader, onDepotDownloaderPathSelected, onUseDepotDownloader]);  // Load defaults from config and auto-validate (prefer PATH/alias)  useEffect(() => {    (async () => {      try {        const cfg = await window.electronAPI?.config?.get?.();        if (cfg) {          const cfgPath = cfg.depotDownloaderPath || '';          const cfgUse = !!cfg.useDepotDownloader;          if (cfgPath && !depotDownloaderPath) {            setDepotDownloaderPath(cfgPath);          }          if (cfgUse !== useDepotDownloader) {            onUseDepotDownloader(cfgUse);          }          setIsValidating(true);          let res = await window.electronAPI?.depotdownloader?.validateInstallation();          if (!res?.success && cfgPath) {            res = await window.electronAPI?.depotdownloader?.validateInstallation(cfgPath);          }          if (res?.success) {            setValidationSuccess(true);            setValidationError(null);          } else if (res && !res.success) {            setValidationSuccess(false);            setValidationError(res.error || 'DepotDownloader not found in PATH or at configured path');          }          setIsValidating(false);        }      } catch (e) {        // Non-fatal      }    })();  }, []);  const handleDepotDownloaderPathChange = (path: string) => {    setDepotDownloaderPath(path);    setValidationError(null);    setValidationSuccess(false);  };  const handleBrowseForDepotDownloader = async () => {    try {      const selectedPath = await window.electronAPI?.dialog?.openDirectory({ title: 'Select DepotDownloader Directory' });      if (selectedPath) {        setDepotDownloaderPath(selectedPath);        setValidationError(null);        setValidationSuccess(false);        await window.electronAPI?.config?.update?.({ depotDownloaderPath: selectedPath });      }    } catch (error) {      console.error('Error browsing for DepotDownloader:', error);      setValidationError('Failed to browse for DepotDownloader directory');    }  };  const handleValidateDepotDownloader = async () => {    setIsValidating(true);    setValidationError(null);    setValidationSuccess(false);    try {      let res = await window.electronAPI?.depotdownloader?.validateInstallation();      if (!res?.success && depotDownloaderPath?.trim()) {        res = await window.electronAPI?.depotdownloader?.validateInstallation(depotDownloaderPath);      }      if (res?.success) {        setValidationSuccess(true);        setValidationError(null);        if (depotDownloaderPath?.trim()) {          await window.electronAPI?.config?.update?.({ depotDownloaderPath: depotDownloaderPath });        }      } else {        setValidationError(res?.error || 'DepotDownloader not found in PATH or at specified path');        setValidationSuccess(false);      }    } catch (error) {      console.error('Error validating DepotDownloader:', error);      setValidationError('Failed to validate DepotDownloader installation');      setValidationSuccess(false);    } finally {      setIsValidating(false);    }  };  const handleUseDepotDownloaderToggle = async (use: boolean) => {    onUseDepotDownloader(use);    try { await window.electronAPI?.config?.update?.({ useDepotDownloader: use }); } catch {}  };  const openDepotDownloaderInstall = () => {    window.electronAPI?.shell?.openExternal('https://github.com/steamre/depotdownloader#installation');  };  return (    <div className="space-y-6">      <div>        <h3 className="text-lg font-semibold mb-2">DepotDownloader Integration (Optional)</h3>        <p className="text-gray-300 mb-4">          DepotDownloader is a modern Steam depot downloader that can automatically download and update          game branches. It provides faster downloads, better error handling, and simpler setup          compared to manual file copying or legacy SteamCMD.        </p>      </div>      {/* Benefits and Requirements */}      <div className="bg-blue-900/20 border border-blue-500/50 rounded-lg p-4">        <h4 className="font-semibold text-blue-300 mb-2">Benefits of DepotDownloader:</h4>        <ul className="text-sm text-blue-200 space-y-1 list-disc list-inside">          <li>Simpler command syntax and better error messages</li>          <li>Built-in Steam Guard support with QR codes</li>          <li>Faster parallel downloads with configurable threads</li>          <li>Modern .NET-based tool with active development</li>          <li>Easy installation via Windows Package Manager (winget)</li>          <li>More reliable than manual file copying or legacy SteamCMD</li>        </ul>      </div>      {/* Installation Options */}      <div className="space-y-4">        <div className="flex items-center space-x-3">          <input            type="radio"            id="use-depotdownloader"            name="depotdownloader-option"            checked={useDepotDownloader}            onChange={() => handleUseDepotDownloaderToggle(true)}            className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 focus:ring-blue-500"          />          <label htmlFor="use-depotdownloader" className="text-white font-medium">            Use DepotDownloader for automated branch management          </label>        </div>        <div className="flex items-center space-x-3">          <input            type="radio"            id="use-copy"            name="depotdownloader-option"            checked={!useDepotDownloader}            onChange={() => handleUseDepotDownloaderToggle(false)}            className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 focus:ring-blue-500"          />          <label htmlFor="use-copy" className="text-white font-medium">            Continue with manual file copying (current method)          </label>        </div>      </div>      {/* DepotDownloader Configuration */}      {useDepotDownloader && (        <div className="space-y-4">          <div>            <h4 className="font-semibold mb-2">DepotDownloader Installation</h4>            <p className="text-gray-300 text-sm mb-4">              DepotDownloader can be installed via Windows Package Manager or downloaded manually              from GitHub. Click "Installation Guide" for detailed instructions.            </p>            <div className="flex items-center space-x-3 mb-4">              <button                onClick={openDepotDownloaderInstall}                className="btn-secondary text-sm"              >                Installation Guide              </button>              <span className="text-xs text-gray-400">                winget install --exact --id SteamRE.DepotDownloader              </span>            </div>          </div>          {/* Optional Path Selection */}          <div>            <label htmlFor="depotdownloader-path" className="block text-sm font-medium mb-2">              DepotDownloader Installation Path (optional)            </label>            <div className="flex space-x-2">              <input                id="depotdownloader-path"                type="text"                value={depotDownloaderPath}                onChange={(e) => handleDepotDownloaderPathChange(e.target.value)}                placeholder="Leave blank to use PATH/alias (recommended)"                className="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"              />              <button                onClick={handleBrowseForDepotDownloader}                className="btn-secondary"              >                Browse              </button>            </div>            <p className="text-xs text-gray-400 mt-1">Optional: specify a custom directory if DepotDownloader is not on PATH. Otherwise the app will auto-detect by invoking the command.</p>          </div>          {/* Validation */}                       <div className="space-y-2">              <button                onClick={handleValidateDepotDownloader}                disabled={isValidating }                className="btn-primary text-sm"              >                {isValidating ? 'Validating...' : 'Validate Installation'}              </button>              {validationSuccess && (                <div className="bg-green-900/20 border border-green-500/50 rounded-lg p-3">                  <p className="text-green-300 text-sm">                    DepotDownloader available (via PATH or specified path)                  </p>                </div>              )}              {validationError && (                <div className="bg-red-900/20 border border-red-500/50 rounded-lg p-3">                  <p className="text-red-300 text-sm">                    {validationError}                  </p>                </div>              )}            </div>                      {/* Requirements */}          <div className="bg-yellow-900/20 border border-yellow-500/50 rounded-lg p-4">            <h5 className="font-semibold text-yellow-300 mb-2">Requirements:</h5>            <ul className="text-sm text-yellow-200 space-y-1 list-disc list-inside">              <li>DepotDownloader must be installed and accessible</li>              <li>Valid Steam account with access to Schedule I</li>              <li>Internet connection for downloading branches</li>              <li>Sufficient disk space for branch downloads</li>              <li>.NET Runtime (automatically included with recent Windows versions)</li>            </ul>          </div>        </div>      )}      {/* Summary */}      <div className="bg-gray-800/50 border border-gray-600 rounded-lg p-4">        <h5 className="font-semibold text-gray-200 mb-2">Current Selection:</h5>        <p className="text-sm text-gray-300">          {useDepotDownloader ? (            depotDownloaderPath ? (              `Using DepotDownloader from: ${depotDownloaderPath}`            ) : (              'Using DepotDownloader via PATH/alias'            )          ) : (            'Using manual file copying method'          )}        </p>      </div>    </div>  );};export default DepotDownloaderIntegrationStep;
