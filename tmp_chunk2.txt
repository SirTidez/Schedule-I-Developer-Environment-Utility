
          {!loading && !error && branches.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {branches.map((branch) => (
                <div key={branch.name} className="card">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="text-lg font-semibold capitalize">{branch.name}</h3>
                    <div className="flex items-center space-x-2">
                      {branch.needsUpdate && (
                        <div className="w-3 h-3 rounded-full bg-yellow-500" title="Update available"></div>
                      )}
                      <div className={`w-3 h-3 rounded-full ${
                        branch.isInstalled ? 'bg-green-500' : 'bg-red-500'
                      }`} title={branch.isInstalled ? 'Installed' : 'Not installed'}></div>
                    </div>
                  </div>
                  
                  <div className="space-y-2 mb-4">
                    <p className="text-sm text-gray-400">
                      Build ID: <span className="text-gray-300">{branch.buildId || 'Unknown'}</span>
                    </p>
                    <p className="text-sm text-gray-400">
                      Last Updated: <span className="text-gray-300">
                        {new Date(branch.lastUpdated * 1000).toLocaleString()}
                      </span>
                    </p>
                    <p className="text-sm text-gray-400">
                      Size: <span className="text-gray-300">{branch.size}</span>
                    </p>
                    <p className="text-sm text-gray-400">
                      Status: <span className={`${
                        branch.needsUpdate ? 'text-yellow-400' : 
                        branch.isInstalled ? 'text-green-400' : 'text-red-400'
                      }`}>
                        {branch.needsUpdate ? 'Update Available' : 
                         branch.isInstalled ? 'Installed' : 'Not Installed'}
                      </span>
                    </p>
                  </div>

                  <div className="space-y-2">
                    {!branch.isInstalled ? (
                      <button
                        onClick={() => handleInstallBranch(branch)}
                        disabled={installingBranch === branch.name}
                        className={`w-full py-2 px-4 rounded-lg text-sm font-medium transition-colors ${
                          installingBranch === branch.name
                            ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
                            : 'bg-blue-600 hover:bg-blue-700 text-white'
                        }`}
                      >
                        {installingBranch === branch.name ? 'Installing...' : 'Install'}
                      </button>
                    ) : (
                      <>
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleInstallBranch(branch)}
                            disabled={installingBranch === branch.name}
                            className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-colors ${
                              installingBranch === branch.name
                                ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
                                : 'bg-blue-600 hover:bg-blue-700 text-white'
                            }`}
                          >
                            {installingBranch === branch.name ? 'Reinstalling...' : 'Reinstall'}
                          </button>
                          <button
                            onClick={() => handleOpenBranchFolder(branch.path)}
                            className="flex-1 py-2 px-4 rounded-lg text-sm font-medium bg-gray-700 hover:bg-gray-600 text-white transition-colors flex items-center justify-center space-x-1"
                            title="Open branch folder in file explorer"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
                            </svg>
                            <span>Open</span>
                          </button>
                          <button
                            onClick={() => handleDeleteBranch(branch)}
                            className="py-2 px-3 rounded-lg text-sm font-medium bg-red-600 hover:bg-red-700 text-white transition-colors flex items-center justify-center"
                            title="Delete this branch instance"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                        <button
                          onClick={() => handlePlayBranch(branch)}
                          className="w-full py-2 px-4 rounded-lg text-sm font-medium bg-green-600 hover:bg-green-700 text-white transition-colors flex items-center justify-center space-x-2"
                        >
                          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M8 5v14l11-7z"/>
                          </svg>
                          <span>Play</span>
                        </button>
                      </>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Configuration Overview - Secondary */}
      <div className="card">
        <h2 className="text-xl font-semibold text-white mb-4">Configuration Overview</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div>
              <p className="text-sm text-gray-400 mb-1">Steam Library Path</p>
              <p className="text-gray-300 font-mono text-sm">{config.steamLibraryPath}</p>
            </div>
            <div>
              <p className="text-sm text-gray-400 mb-1">Game Install Path</p>
              <p className="text-gray-300 font-mono text-sm">{config.gameInstallPath}</p>
            </div>
            <div>
              <p className="text-sm text-gray-400 mb-1">Managed Environment Path</p>
              <p className="text-gray-300 font-mono text-sm">{config.managedEnvironmentPath}</p>
            </div>
            <div>
              <p className="text-sm text-gray-400 mb-1">Installed Branch</p>
              <p className="text-gray-300">{config.installedBranch || 'None'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-400 mb-1">Config Version</p>
              <p className="text-gray-300">{config.configVersion}</p>
            </div>
            <div>
              <p className="text-sm text-gray-400 mb-1">Last Updated</p>
              <p className="text-gray-300">{new Date(config.lastUpdated).toLocaleString()}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Steam Session (with inline login when needed) */}
      <div className="card">
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-xl font-semibold text-white">Steam Session</h2>
          {cachedUser && (
            <button className="btn-secondary" onClick={handleLogout}>Log out</button>
          )}
        </div>
        {cachedUser ? (
          <p className="text-sm text-gray-300">Logged in as <span className="font-mono">{cachedUser}</span></p>
        ) : (
          <div className="space-y-3">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm mb-1">Steam Username</label>
                <input value={loginUser} onChange={e => setLoginUser(e.target.value)} className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white" />
              </div>
              <div>
                <label className="block text-sm mb-1">Steam Password</label>
                <input type="password" value={loginPass} onChange={e => setLoginPass(e.target.value)} className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white" />
              </div>
            </div>
            {!loginStatus.guard && (
              <button className="btn-primary" disabled={loginStatus.loggingIn || !loginUser || !loginPass} onClick={() => doDepotLogin()}>
                {loginStatus.loggingIn ? 'Logging in...' : 'Login'}
              </button>
            )}
            {loginStatus.guard === 'email' && (
              <div className="flex items-center space-x-2">
                <input placeholder="Email code" value={loginGuardCode} onChange={e => setLoginGuardCode(e.target.value)} className="px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white" />
                <button className="btn-primary" disabled={loginStatus.loggingIn || !loginGuardCode.trim()} onClick={() => doDepotLogin({ twoFactorCode: loginGuardCode.trim() })}>Submit Code</button>
              </div>
            )}
            {loginStatus.guard === 'mobile' && (
              <div className="flex items-center space-x-2">
                <button className="btn-primary" disabled={loginStatus.loggingIn} onClick={() => doDepotLogin({ confirmMobile: true })}>{loginStatus.loggingIn ? 'Confirming...' : 'I Have Approved in Steam Mobile'}</button>
                <button className="btn-secondary" disabled={loginStatus.loggingIn} onClick={async () => { try { await window.electronAPI.depotdownloader.cancel(); } catch {}; setLoginStatus({ loggingIn: false, msg: '', err: 'Cancelled', guard: null }); }}>Cancel</button>
              </div>
            )}
            {loginStatus.msg && <p className="text-sm text-blue-300">{loginStatus.msg}</p>}
            {loginStatus.err && <p className="text-sm text-red-300">{loginStatus.err}</p>}
          </div>
        )}
      </div>

      {/* Default Mods Dialog */}
      <DefaultModsDialog
        isOpen={showDefaultModsDialog}
        onClose={() => setShowDefaultModsDialog(false)}
        onStartInstallation={handleStartDefaultModsInstallation}
        branches={branches.map(branch => ({
          name: branch.name,
          folderName: branch.path.split('\\').pop() || branch.name.toLowerCase().replace(' ', '-'),
          isInstalled: branch.isInstalled,
          compilationType: branch.name === 'Main' || branch.name === 'Beta' ? 'Il2Cpp' : 'Mono'
        }))}
        managedEnvironmentPath={config?.managedEnvironmentPath || ''}
      />

      {/* Update Dialog */}
      {updateInfo && (
        <UpdateDialog
          isOpen={showUpdateDialog}
          updateInfo={updateInfo}
          onClose={handleUpdateDialogClose}
          onHideUntilNextRelease={handleHideUpdateUntilNextRelease}
        />
      )}
      <SettingsDialog isOpen={showSettings} onClose={() => setShowSettings(false)} />
    </div>
  );
};

export default ManagedEnvironment;
